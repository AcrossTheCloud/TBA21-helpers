# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: TBA21-helpers # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  region: ${env:REGION, eu-central-1}
  stage: ${env:STAGE, prod}
  timeout: 900
  memorySize: 256
  environment: #service-wide env vars will be used in some functions
    PGUSER: ${env:PGUSER}
    PGPASSWORD: ${env:PGPASSWORD}
    PGHOST: ${env:PGHOST}
    PGPORT: ${env:PGPORT, "5432"} 
    PGDATABASE: ${env:PGDATABASE}
    PGSSL: ${env:PGSSL}
    PG_IMAGE_METADATA_TABLE: ${env:PG_IMAGE_METADATA_TABLE, "tba21.imagesmetadata"}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - Ref: TBA21FileProcessorStateMachine
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::tba21-helpers-test/*"
        - "arn:aws:s3:::tba21-helpers-test"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::tba21-rekognition-test/*"
        - "arn:aws:s3:::tba21-rekognition-test"
        - "arn:aws:s3:::tba21-helpers-heitojpeg-test/*"
        - "arn:aws:s3:::tba21-helpers-heitojpeg-test"


plugins:
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-step-functions-offline

functions:
  master:
    handler: master.start
    environment:
      stateMachineArn: ${self:resources.Outputs.TBA21FileProcessorStateMachine.Value}
  generateMP3:
    handler: generate_mp3.handler
    environment:
      ALEXA_AUDIO_BUCKET: oceanarchive-alexa-audio
  copy_for_rekognition:
    handler: copy_for_rekognition.handler
    environment:
      REKOGNITION_BUCKET: tba21-rekognition-test
  image_tagger:
    handler: image_tagger.handler
    environment:
      API_KEY_REKOGNITION: ${env:API_KEY_REKOGNITION}
      API_ENDPOINT: ${env:API_ENDPOINT} # of the form https://hostname/prod/labels 
  image_hashing:
    handler: image_hashing.handler
    memorySize: 1024
  copy_video_for_transcoding:
    handler: copy_for_vid_transcoding.handler
    environment:
      TRANSCODE_BUCKET: oceanarchive-video-on-demand-source-1xdwtz84a23si
  hashes:
    handler: hashes.handler
    memorySize: 512
  exif:
    handler: exif.handler
  raw_conversion:
    handler: raw_conversion.handler
  convertHEI:
    handler: convertHEI.handler
    environment:
      CONVERSION_BUCKET: tba21-helpers-heitojpeg-test

stepFunctions:
  stateMachines:
    hellostepfunc:
      name: TBA21FileProcessorStateMachine
      definition:
        StartAt: Hashes
        States:
          Hashes: 
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-hashes
            ResultPath: '$.sha512Hash'
            Next: IsImage
          IsImage:
            Type: Choice
            Choices:
            - Variable: "$.isImage"
              BooleanEquals: true
              Next: Exif
            Default: RawConversion
          RawConversion:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-raw_conversion
            End: true
          Exif:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-exif
            ResultPath: '$.ExifResult'
            Next: IsJPEG_PNG
          IsJPEG_PNG:
            Type: Choice
            Choices:
            - Variable: "$.isHEI"
              BooleanEquals: true
              Next: CovertHEI
            - Variable: "$.isJPEGPNG"
              BooleanEquals: true
              Next: Parallel
            Default: Final State
          CovertHEI:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-convertHEI
            ResultPath: '$.convertHEIresult'
            Next: Parallel
          Parallel:
            Type: Parallel
            Next: Final State
            Branches:
            - StartAt: image_hashing
              States:
                image_hashing:
                  Type: Task
                  Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-image_hashing
                  End: true
            - StartAt: copy_for_rekognition
              States:
                copy_for_rekognition:
                  Type: Task
                  Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-copy_for_rekognition
                  ResultPath: '$.copy_for_rekognition_results'
                  Next: image_tagger
                image_tagger:
                  Type: Task
                  Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-image_tagger
                  End: true
          Final State:
            Type: Pass
            End: true

resources:
  Resources:
    S3BucketTempJPEG:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tba21-helpers-heitojpeg-test
        # add additional custom bucket configuration here
  Outputs:
    TBA21FileProcessorStateMachine:
      Description: The ARN of the example state machine
      Value:
        Ref: TBA21FileProcessorStateMachine
custom:
  stepFunctionsOffline:
    Hashes: hashes #(v2.0)
    exif: exif #(v2.0)
    raw_conversion: raw_conversion
